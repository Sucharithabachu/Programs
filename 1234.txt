Controller:
----------------------------------------------------------------------------------------------------------------------
package com.app.trms.user.controller;

import org.springframework.beans.factory.annotation.Autowired;


import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.trms.ResponseHandler;
import com.app.trms.user.dto.TrmsUserDto;
import com.app.trms.user.modal.TrmsUser;
import com.app.trms.user.service.TrmsUserService;

import io.swagger.v3.oas.annotations.parameters.RequestBody;

 
/**
 * Controller class for managing contracts Provides API endpoints for creating,
 * updating and retrieving contracts. 
 **/
@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("v1/")
public class TrmsUserController {

	@Autowired
	TrmsUserService userService;

	// Getting all the users

	/*
	 * Controller for fetching all the users Using Get Mapping, Developer name :
	 * Chirag Agarwal
	 */
	@GetMapping("users")
	public ResponseEntity<Object> allUsers() {
		try {
			// Retriving the contracts from the database
			Iterable<TrmsUser> result = userService.getAllUser();
			// Return the contracts with a success status code
			return ResponseHandler.generateResponse("Successfully retrieved data!", HttpStatus.OK, result);
		} catch (Exception e) {
			// Return the generic error response
			return ResponseHandler.generateResponse(e.getMessage(), HttpStatus.MULTI_STATUS, null);
		}
	}

	/*s
	 * Controller for adding the Users. Parameters - userDto. Developer name: Chirag
	 * Agarwal
	 */
	@PostMapping("user/add")
	public ResponseEntity<Object> createUser(@RequestBody TrmsUserDto userDto) {
		TrmsUser saveduserDto = userService.createUser(userDto);

		return ResponseHandler.generateResponse("Successfully added data!", HttpStatus.OK, saveduserDto);

	}

	/*
	 * Controller for getting user by sapID parameters - sapId Developer Name :
	 * Chirag Agarwal
	 */
	@GetMapping("user/{sapId}")
	public ResponseEntity<Object> getUserBySapId(@PathVariable int sapId) {
		try {

			TrmsUser result = userService.getUserBySapId(sapId);
			// Return the contracts with a success status code
			return ResponseHandler.generateResponse("Successfully retrieved data!", HttpStatus.OK, result);
		} catch (Exception e) {
			// Return the generic error response
			return ResponseHandler.generateResponse(e.getMessage(), HttpStatus.MULTI_STATUS, null);
		}
	}

	/*
	 * controller for updating user by userId parameters - userId Developer name :
	 * Chirag Agarwal
	 */

	@PutMapping("user/{sapId}")
	public ResponseEntity<Object> updateUser(@RequestBody TrmsUserDto userDto, @PathVariable int sapId
) {
		Boolean isUpdated = userService.updateUser(userDto);
		if (isUpdated) {
			return ResponseHandler.generateResponse("Successfully Update the  data!", HttpStatus.OK, isUpdated);

		} else {
			return ResponseHandler.generateResponse("Something went wrong", HttpStatus.OK, isUpdated);

		}
	}


	/*
	 * controller for deleting user by userId parameters - userId Developer name :
	 * Chirag Agarwal
	 */
	@DeleteMapping("user/{sapId}")
	public ResponseEntity<Object> deleteUserBySapId(@PathVariable int sapId) {
		Boolean isDeleted = userService.deleteUserById(sapId);
		if (isDeleted) {
			return ResponseHandler.generateResponse("Successfully Deleted the  data!", HttpStatus.OK, isDeleted);

		} else {
			return ResponseHandler.generateResponse("Something went wrong", HttpStatus.OK, isDeleted);

		}
	}
	
	
	@GetMapping("user/d/{sapId}")
	public ResponseEntity<Object> usersDtoById(@PathVariable int sapId) {
		try {
			// Retriving the contracts from the database
			TrmsUserDto result = userService.getUserDtoBySapId(sapId);
			// Return the contracts with a success status code
			return ResponseHandler.generateResponse("Successfully retrieved data!", HttpStatus.OK, result);
		} catch (Exception e) {
			// Return the generic error response
			return ResponseHandler.generateResponse(e.getMessage(), HttpStatus.MULTI_STATUS, null);
		}
	}
	
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
UserDto:
------------------------------------------------------------------
package com.app.trms.user.dto;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

public class TrmsUserDto {

	private String firstName;

	private String lastName;

	private String displayName;

	private LocalDate dob;

	private String emergencyNumber;

	private String emergencyPerson;

	private String address;

	private String profilePicturePath;

	private String profilePictureType;

	private String ldapId;

	private int sapId;

	private String fedexEmailId;

	private String mphasisEmailId;

	private String personalEmailId;

	private String homePhone;

	private String workPhone;

	private String mobilePhone;

	private int reportingManager;

	private int workLocation;

	private int workShift;

	private String cubicalNumber;

	private String billingType;

	private String designation;

	private String password;

	private String level;

	private Set<Integer> roles = new HashSet<>();

	public TrmsUserDto() {
		super();
		// TODO Auto-generated constructor stub
	}

	public TrmsUserDto(String firstName, String lastName, String displayName, LocalDate dob, String emergencyNumber,
			String emergencyPerson, String address, String profilePicturePath, String profilePictureType, String ldapId,
			int sapId, String fedexEmailId, String mphasisEmailId, String personalEmailId, String homePhone,
			String workPhone, String mobilePhone, int reportingManager, int workLocation, int workShift,
			String cubicalNumber, String billingType, String designation, String password, String level) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.displayName = displayName;
		this.dob = dob;
		this.emergencyNumber = emergencyNumber;
		this.emergencyPerson = emergencyPerson;
		this.address = address;
		this.profilePicturePath = profilePicturePath;
		this.profilePictureType = profilePictureType;
		this.ldapId = ldapId;
		this.sapId = sapId;
		this.fedexEmailId = fedexEmailId;
		this.mphasisEmailId = mphasisEmailId;
		this.personalEmailId = personalEmailId;
		this.homePhone = homePhone;
		this.workPhone = workPhone;
		this.mobilePhone = mobilePhone;
		this.reportingManager = reportingManager;
		this.workLocation = workLocation;
		this.workShift = workShift;
		this.cubicalNumber = cubicalNumber;
		this.billingType = billingType;
		this.designation = designation;
		this.password = password;
		this.level = level;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getDisplayName() {
		return displayName;
	}

	public void setDisplayName(String displayName) {
		this.displayName = displayName;
	}

	public LocalDate getDob() {
		return dob;
	}

	public void setDob(LocalDate dob) {
		this.dob = dob;
	}

	public String getEmergencyNumber() {
		return emergencyNumber;
	}

	public void setEmergencyNumber(String emergencyNumber) {
		this.emergencyNumber = emergencyNumber;
	}

	public String getEmergencyPerson() {
		return emergencyPerson;
	}

	public void setEmergencyPerson(String emergencyPerson) {
		this.emergencyPerson = emergencyPerson;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getProfilePicturePath() {
		return profilePicturePath;
	}

	public void setProfilePicturePath(String profilePicturePath) {
		this.profilePicturePath = profilePicturePath;
	}

	public String getProfilePictureType() {
		return profilePictureType;
	}

	public void setProfilePictureType(String profilePictureType) {
		this.profilePictureType = profilePictureType;
	}

	public String getLdapId() {
		return ldapId;
	}

	public void setLdapId(String ldapId) {
		this.ldapId = ldapId;
	}

	public int getSapId() {
		return sapId;
	}

	public void setSapId(int sapId) {
		this.sapId = sapId;
	}

	public String getFedexEmailId() {
		return fedexEmailId;
	}

	public void setFedexEmailId(String fedexEmailId) {
		this.fedexEmailId = fedexEmailId;
	}

	public String getMphasisEmailId() {
		return mphasisEmailId;
	}

	public void setMphasisEmailId(String mphasisEmailId) {
		this.mphasisEmailId = mphasisEmailId;
	}

	public String getPersonalEmailId() {
		return personalEmailId;
	}

	public void setPersonalEmailId(String personalEmailId) {
		this.personalEmailId = personalEmailId;
	}

	public String getHomePhone() {
		return homePhone;
	}

	public void setHomePhone(String homePhone) {
		this.homePhone = homePhone;
	}

	public String getWorkPhone() {
		return workPhone;
	}

	public void setWorkPhone(String workPhone) {
		this.workPhone = workPhone;
	}

	public String getMobilePhone() {
		return mobilePhone;
	}

	public void setMobilePhone(String mobilePhone) {
		this.mobilePhone = mobilePhone;
	}

	public int getReportingManager() {
		return reportingManager;
	}

	public void setReportingManager(int reportingManager) {
		this.reportingManager = reportingManager;
	}

	public int getWorkLocation() {
		return workLocation;
	}

	public void setWorkLocation(int workLocation) {
		this.workLocation = workLocation;
	}

	public int getWorkShift() {
		return workShift;
	}

	public void setWorkShift(int workShift) {
		this.workShift = workShift;
	}

	public String getCubicalNumber() {
		return cubicalNumber;
	}

	public void setCubicalNumber(String cubicalNumber) {
		this.cubicalNumber = cubicalNumber;
	}

	public String getBillingType() {
		return billingType;
	}

	public void setBillingType(String billingType) {
		this.billingType = billingType;
	}

	public String getDesignation() {
		return designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getLevel() {
		return level;
	}

	public void setLevel(String level) {
		this.level = level;
	}

	public Set<Integer> getRoles() {
		return roles;
	}

	public void setRoles(Set<Integer> roles) {
		this.roles = roles;
	}

	@Override
	public String toString() {
		return "TrmsUserDto [firstName=" + firstName + ", lastName=" + lastName + ", displayName=" + displayName
				+ ", dob=" + dob + ", emergencyNumber=" + emergencyNumber + ", emergencyPerson=" + emergencyPerson
				+ ", address=" + address + ", profilePicturePath=" + profilePicturePath + ", profilePictureType="
				+ profilePictureType + ", ldapId=" + ldapId + ", sapId=" + sapId + ", fedexEmailId=" + fedexEmailId
				+ ", mphasisEmailId=" + mphasisEmailId + ", personalEmailId=" + personalEmailId + ", homePhone="
				+ homePhone + ", workPhone=" + workPhone + ", mobilePhone=" + mobilePhone + ", reportingManager="
				+ reportingManager + ", workLocation=" + workLocation + ", workShift=" + workShift + ", cubicalNumber="
				+ cubicalNumber + ", billingType=" + billingType + ", designation=" + designation + ", password="
				+ password + ", level=" + level + ", roles=" + roles + "]";
	}

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Modal:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
package com.app.trms.user.modal;

import java.time.LocalDate;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.validation.constraints.Email;
import javax.validation.constraints.Pattern;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.fasterxml.jackson.annotation.JsonIgnore;

/*
 * TrmsUser entity for trms
 * Developer name : Chirag Agarwal
 */
@Entity
public class TrmsUser implements UserDetails {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Id
	private int sapId;

	@Column(name = "first_name")
	private String firstName;

	@Column(name = "last_name")
	private String lastName;

	@Column(name = "display_name")
	private String displayName;

	@Column(name = "dob")
	private LocalDate dob;

	@Pattern(regexp = "^[0-9]{10}$", message = " invalid emergency phone number")
	@Column(name = "emerg_number")
	private String emergencyNumber;

	@Column(name = "emerg_person")
	private String emergencyPerson;

	@Column(name = "address")
	private String address;

	@Column(name = "profile_pic_path")
	private String profilePicturePath;

	@Column(name = "profile_pic_type")
	private String profilePictureType;

	@Column(name = "ldap_id", unique = true)
	private String ldapId;

	@Email(message = "Invalid fedex email address")
	@Column(name = "fedex_email_id", unique = true)
	private String fedexEmailId;

	@Email(message = "Invalid mphasis email address")
	@Column(name = "mphasis_email_id", unique = true)
	private String mphasisEmailId;

	@Email(message = "Invalid personal email address")
	@Column(name = "personal_email_id", unique = true)
	private String personalEmailId;

	@Pattern(regexp = "^[0-9]{10}$", message = " invalid home phone")
	@Column(name = "home_phone", unique = true)
	private String homePhone;

	@Pattern(regexp = "^[0-9]{10}$", message = " invalid work phone")
	@Column(name = "work_phone", unique = true)
	private String workPhone;

	@Pattern(regexp = "^[0-9]{10}$", message = " invalid mobile phone")
	@Column(name = "mobile_phone", unique = true)
	private String mobilePhone;

	@Column(name = "cubical_number")
	private String cubicalNumber;

	@Column(name = "billing_type")
	private String billingType;

	@Column(name = "designation")
	private String designation;

	@JsonIgnore
	@Column(name = "password")
	private String password;

	@Column(name = "level")
	private String level;

	@ManyToOne
	@JoinColumn(name = "reporting_manager_fk", nullable = true)
	private TrmsUser reportingManager;

	@ManyToOne
	@JoinColumn(name = "work_location_fk", nullable = true)
	private SeatingArrangement workLocation;

	@ManyToOne
	@JoinColumn(name = "work_shift_fk", nullable = true)
	private WorkShift workShift;

	@ManyToMany
	@JoinTable(name = "users_roles", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
	private Set<Role> roles = new HashSet<>();

	public TrmsUser() {
		super();
		// TODO Auto-generated constructor stub
	}

	public TrmsUser(String firstName, String lastName, String displayName, LocalDate dob, String emergencyNumber,
			String emergencyPerson, String address, String profilePicturePath, String profilePictureType, String ldapId,
			int sapId, String fedexEmailId, String mphasisEmailId, String personalEmailId, String homePhone,
			String workPhone, String mobilePhone, String cubicalNumber, String billingType, String designation,
			String level, TrmsUser reportingManager, SeatingArrangement workLocation, WorkShift workShift) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.displayName = displayName;
		this.dob = dob;
		this.emergencyNumber = emergencyNumber;
		this.emergencyPerson = emergencyPerson;
		this.address = address;
		this.profilePicturePath = profilePicturePath;
		this.profilePictureType = profilePictureType;
		this.ldapId = ldapId;
		this.sapId = sapId;
		this.fedexEmailId = fedexEmailId;
		this.mphasisEmailId = mphasisEmailId;
		this.personalEmailId = personalEmailId;
		this.homePhone = homePhone;
		this.workPhone = workPhone;
		this.mobilePhone = mobilePhone;
		this.cubicalNumber = cubicalNumber;
		this.billingType = billingType;
		this.designation = designation;
		this.level = level;
		this.reportingManager = reportingManager;
		this.workLocation = workLocation;
		this.workShift = workShift;

	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getDisplayName() {
		return displayName;
	}

	public void setDisplayName(String displayName) {
		this.displayName = displayName;
	}

	public LocalDate getDob() {
		return dob;
	}

	public void setDob(LocalDate dob) {
		this.dob = dob;
	}

	public String getEmergencyNumber() {
		return emergencyNumber;
	}

	public void setEmergencyNumber(String emergencyNumber) {
		this.emergencyNumber = emergencyNumber;
	}

	public String getEmergencyPerson() {
		return emergencyPerson;
	}

	public void setEmergencyPerson(String emergencyPerson) {
		this.emergencyPerson = emergencyPerson;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getProfilePicturePath() {
		return profilePicturePath;
	}

	public void setProfilePicturePath(String profilePicturePath) {
		this.profilePicturePath = profilePicturePath;
	}

	public String getProfilePictureType() {
		return profilePictureType;
	}

	public void setProfilePictureType(String profilePictureType) {
		this.profilePictureType = profilePictureType;
	}

	public String getLdapId() {
		return ldapId;
	}

	public void setLdapId(String ldapId) {
		this.ldapId = ldapId;
	}

	public int getSapId() {
		return sapId;
	}

	public void setSapId(int sapId) {
		this.sapId = sapId;
	}

	public String getFedexEmailId() {
		return fedexEmailId;
	}

	public void setFedexEmailId(String fedexEmailId) {
		this.fedexEmailId = fedexEmailId;
	}

	public String getMphasisEmailId() {
		return mphasisEmailId;
	}

	public void setMphasisEmailId(String mphasisEmailId) {
		this.mphasisEmailId = mphasisEmailId;
	}

	public String getPersonalEmailId() {
		return personalEmailId;
	}

	public void setPersonalEmailId(String personalEmailId) {
		this.personalEmailId = personalEmailId;
	}

	public String getHomePhone() {
		return homePhone;
	}

	public void setHomePhone(String homePhone) {
		this.homePhone = homePhone;
	}

	public String getWorkPhone() {
		return workPhone;
	}

	public void setWorkPhone(String workPhone) {
		this.workPhone = workPhone;
	}

	public String getMobilePhone() {
		return mobilePhone;
	}

	public void setMobilePhone(String mobilePhone) {
		this.mobilePhone = mobilePhone;
	}

	public TrmsUser getReportingManager() {
		return reportingManager;
	}

	public void setReportingManager(TrmsUser reportingManager) {
		this.reportingManager = reportingManager;
	}

	public SeatingArrangement getWorkLocation() {
		return workLocation;
	}

	public void setWorkLocation(SeatingArrangement workLocation) {
		this.workLocation = workLocation;
	}

	public WorkShift getWorkShift() {
		return workShift;
	}

	public void setWorkShift(WorkShift workShift) {
		this.workShift = workShift;
	}

	public String getCubicalNumber() {
		return cubicalNumber;
	}

	public void setCubicalNumber(String cubicalNumber) {
		this.cubicalNumber = cubicalNumber;
	}

	public String getBillingType() {
		return billingType;
	}

	public void setBillingType(String billingType) {
		this.billingType = billingType;
	}

	public String getDesignation() {
		return designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getLevel() {
		return level;
	}

	public void setLevel(String level) {
		this.level = level;
	}

	public Set<Role> getRoles() {
		return roles;
	}

	public void setRoles(Set<Role> roles) {
		this.roles = roles;
	}

	@Override
	public String toString() {
		return "TrmsUser [firstName=" + firstName + ", lastName=" + lastName + ", displayName=" + displayName + ", dob="
				+ dob + ", emergencyNumber=" + emergencyNumber + ", emergencyPerson=" + emergencyPerson + ", address="
				+ address + ", profilePicturePath=" + profilePicturePath + ", profilePictureType=" + profilePictureType
				+ ", ldapId=" + ldapId + ", sapId=" + sapId + ", fedexEmailId=" + fedexEmailId + ", mphasisEmailId="
				+ mphasisEmailId + ", personalEmailId=" + personalEmailId + ", homePhone=" + homePhone + ", workPhone="
				+ workPhone + ", mobilePhone=" + mobilePhone + ", reportingManager=" + reportingManager
				+ ", workLocation=" + workLocation + ", workShift=" + workShift + ", cubicalNumber=" + cubicalNumber
				+ ", billingType=" + billingType + ", designation=" + designation + ", password=" + password
				+ ", level=" + level + ", roles=" + roles + "]";
	}

	public void addRole(Role role) {
		this.roles.add(role);
	}

	@Override
	@JsonIgnore
	public Collection<? extends GrantedAuthority> getAuthorities() {
		List<SimpleGrantedAuthority> authorities = new ArrayList<>();
		for (Role role : roles) {
			authorities.add(new SimpleGrantedAuthority(role.getName()));
		}
		return authorities;
	}

	@Override
	public String getUsername() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isAccountNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean isEnabled() {
		// TODO Auto-generated method stub
		return true;
	}

}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Repository:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
package com.app.trms.user.repository;

import javax.transaction.Transactional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.app.trms.user.modal.TrmsUser;
/*
 * Repository for TrmsUser
 * users JpaRepository
 * Developer Name : Chirag Agarwal
 */
public interface TrmsUserRepository extends JpaRepository<TrmsUser, Integer> {

	TrmsUser findBySapId(int reportingManager);

	boolean existsBySapId(int sapId);

	@Transactional
	void deleteBySapId(int sapId);

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Service:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
package com.app.trms.user.service;

 import com.app.trms.user.dto.TrmsUserDto;
import com.app.trms.user.modal.TrmsUser;

/*
 * Service interface for TrmsUser
 * Developed By Chirag Agarwal
 */
public interface TrmsUserService {

	Iterable<TrmsUser> getAllUser();

	TrmsUser createUser(TrmsUserDto userDto);

	TrmsUser getUserBySapId(int sapId);

	boolean existsBySapId(int sapId);

	TrmsUser save(int sapId, TrmsUserDto userDto);

	Boolean updateUser(TrmsUserDto userDto);

	Boolean deleteUserById(int sapId);

	Iterable<TrmsUserDto> getAllUserDto();

	TrmsUserDto getUserDtoBySapId(int sapId);

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
ServiceImpl:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
package com.app.trms.user.service.Impl;

import java.util.HashSet;

import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.app.trms.user.dto.TrmsUserDto;
import com.app.trms.user.modal.Role;
import com.app.trms.user.modal.TrmsUser;
import com.app.trms.user.repository.TrmsUserRepository;
import com.app.trms.user.repository.WorkLocationRepository;
import com.app.trms.user.repository.WorkShiftRepository;
import com.app.trms.user.service.TrmsUserService;

@Service
public class TrmsUserServiceImpl implements TrmsUserService {

	@Autowired
	TrmsUserRepository userRepo;

	@Autowired
	WorkLocationRepository workLocationRepo;

	@Autowired
	WorkShiftRepository workShiftRepo;

	@Override
	public Iterable<TrmsUser> getAllUser() {
		return userRepo.findAll();
	}

	@Override
	public TrmsUser createUser(TrmsUserDto userDto) {

		TrmsUser user = new TrmsUser(userDto.getFirstName(), userDto.getLastName(), userDto.getDisplayName(),
				userDto.getDob(), userDto.getEmergencyNumber(), userDto.getEmergencyPerson(), userDto.getAddress(),
				userDto.getProfilePicturePath(), userDto.getProfilePictureType(), userDto.getLdapId(),
				userDto.getSapId(), userDto.getFedexEmailId(), userDto.getMphasisEmailId(),
				userDto.getPersonalEmailId(), userDto.getHomePhone(), userDto.getWorkPhone(), userDto.getMobilePhone(),
				userDto.getCubicalNumber(), userDto.getBillingType(), userDto.getDesignation(), userDto.getLevel(),
				userRepo.findBySapId(userDto.getReportingManager()),
				workLocationRepo.findById(userDto.getWorkLocation()).orElse(null),
				workShiftRepo.findById(userDto.getWorkShift()).orElse(null));

		for (int roleId : userDto.getRoles()) {
			user.addRole(new Role(roleId));

		}

		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		String password = passwordEncoder.encode(userDto.getPassword());
		// userDto.getPassword());

		user.setPassword(password);
		TrmsUser newUser = userRepo.save(user);

		return newUser;

	}

	@Override
	public TrmsUser getUserBySapId(int sapId) {
		// TODO Auto-generated method stub
		return userRepo.findBySapId(sapId);
	}

	@Override
	public boolean existsBySapId(int sapId) {
		// TODO Auto-generated method stub
		return userRepo.existsBySapId(sapId);
	}

	@Override
	public TrmsUser save(int sapId, TrmsUserDto userDto) {
		TrmsUser user = new TrmsUser(userDto.getFirstName(), userDto.getLastName(), userDto.getDisplayName(),
				userDto.getDob(), userDto.getEmergencyNumber(), userDto.getEmergencyPerson(), userDto.getAddress(),
				userDto.getProfilePicturePath(), userDto.getProfilePictureType(), userDto.getLdapId(),
				userDto.getSapId(), userDto.getFedexEmailId(), userDto.getMphasisEmailId(),
				userDto.getPersonalEmailId(), userDto.getHomePhone(), userDto.getWorkPhone(), userDto.getMobilePhone(),
				userDto.getCubicalNumber(), userDto.getBillingType(), userDto.getDesignation(), userDto.getLevel(),
				userRepo.findBySapId(userDto.getReportingManager()),
				workLocationRepo.findById(userDto.getWorkLocation()).orElse(null),
				workShiftRepo.findById(userDto.getWorkShift()).orElse(null));

		for (int roleId : userDto.getRoles()) {
			user.addRole(new Role(roleId));

		}
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		String password = passwordEncoder.encode(userDto.getPassword());

		user.setPassword(password);

		user.setSapId(sapId);
		TrmsUser newUser = userRepo.save(user);
		return newUser;

	}

	@Override
	public Boolean updateUser(TrmsUserDto userDto) {
		try {
			TrmsUser optionalUser = userRepo.findBySapId(userDto.getSapId());
			System.out.println(optionalUser);
			if (optionalUser != null) {

				TrmsUser user = new TrmsUser(userDto.getFirstName(), userDto.getLastName(), userDto.getDisplayName(),
						userDto.getDob(), userDto.getEmergencyNumber(), userDto.getEmergencyPerson(),
						userDto.getAddress(), userDto.getProfilePicturePath(), userDto.getProfilePictureType(),
						userDto.getLdapId(), userDto.getSapId(), userDto.getFedexEmailId(), userDto.getMphasisEmailId(),
						userDto.getPersonalEmailId(), userDto.getHomePhone(), userDto.getWorkPhone(),
						userDto.getMobilePhone(), userDto.getCubicalNumber(), userDto.getBillingType(),
						userDto.getDesignation(), userDto.getLevel(),
						userRepo.findBySapId(userDto.getReportingManager()),
						workLocationRepo.findById(userDto.getWorkLocation()).orElse(null),
						workShiftRepo.findById(userDto.getWorkShift()).orElse(null));

				for (int roleId : userDto.getRoles()) {
					user.addRole(new Role(roleId));

				}

				userRepo.saveAndFlush(user);
				return true;

			} else {
				return false;
			}
		} catch (Exception e) {
			System.err.println(e);
			return false;
		}

	}

	@Override
	public Boolean deleteUserById(int sapId) {
		if (userRepo.existsBySapId(sapId)) {
			try {
				userRepo.deleteBySapId(sapId);
				return true;
			} catch (Exception e) {
				return false;
			}
		} else {
			return false;
		}
	}

	@Override
	public Iterable<TrmsUserDto> getAllUserDto() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public TrmsUserDto getUserDtoBySapId(int sapId) {
		TrmsUser user = userRepo.findBySapId(sapId);
		TrmsUserDto userDto = new TrmsUserDto(user.getFirstName(), user.getLastName(), user.getDisplayName(),
				user.getDob(), user.getEmergencyNumber(), user.getEmergencyPerson(), user.getAddress(),
				user.getProfilePicturePath(), user.getProfilePictureType(), user.getLdapId(), user.getSapId(),
				user.getFedexEmailId(), user.getMphasisEmailId(), user.getPersonalEmailId(), user.getHomePhone(),
				user.getWorkPhone(), user.getMobilePhone(),
				user.getReportingManager() == null ? 0 : user.getReportingManager().getSapId(),
				user.getWorkLocation() == null ? 0 : user.getWorkLocation().getId(),
				user.getWorkShift() == null ? 0 : user.getWorkShift().getId(), user.getCubicalNumber(),
				user.getBillingType(), user.getDesignation(), user.getPassword(), user.getLevel());

		Set<Integer> roleId = new HashSet<>();

		for (Role role : user.getRoles()) {

			roleId.add(role.getId());
		}
		System.err.println("Sap ID is " + sapId);
		userDto.setRoles(roleId);
		return userDto;

	}

}

//	@Override
//	public TrmsUserDto getUserDtoBySapId(int sapId2) {
//		int sapId=123456;
//		// TODO Auto-generated method stub

-------------------------------------------------------------------------------------------------------------------------------------------------------------------